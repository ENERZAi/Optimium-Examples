// depthwise convolution opus implemenation
module core.List.List as ll
module common.uniontensor as ut
module common.params as params
module common.layerparams as lparams
module linear.linearhelper as u

template</attr_params: params.Attributes, optim_params: params.Optimization, layer_params: ll.List<params.Layerargs>,
    input_data: ll.List<ll.List<ut.UnionTensor>>, input_dtypes: ll.List<ll.List<rtType>>, input_shapes: ll.List<ll.List<i32>>, input_scales: ll.List<ll.List<ut.UnionTensor>>, input_zero_points: ll.List<ll.List<ut.UnionTensor>>,
    output_dtypes: ll.List<ll.List<rtType>>, output_shapes: ll.List<ll.List<i32>>, output_scales: ll.List<ll.List<ut.UnionTensor>>, output_zero_points: ll.List<ll.List<ut.UnionTensor>>,
    input_edges: ll.List<ll.List<tuple<i32, i32>>>, output_edges: ll.List<ll.List<tuple<i32, i32>>>, ismainops: ll.List<boolean>,
    input_t: rtType, input_rt_list : ll.List<rtType>,  output_t: rtType, output_rt_list : ll.List<rtType>/>
attr[Optimization : { VectorSize : 512 }]
fun linear_impl(mut &inputs : input_t, mut &outputs : output_t) -> i32 {
    // compiletime operations
    ${
        print("linear compiletime")
        let layerindex = (
            let mut index = 0
            for(i from 0 to (ll.len layer_params)){
                match (ll.item i layer_params) with 
                    | params.Linear x   -> index <- i
                    | _                 -> _end_
            }
            index
        )
        let thislayer_params = 
            match (ll.item index layer_params) with
                | params.Linear x   -> x

        let input_dtype = ll.item 0 (ll.item layerindex input_dtypes)
        let input_shape = ll.item 0 (ll.item layerindex input_shapes)
        let input_scale = ll.item 0 (ll.item layerindex input_scales)
        let input_zero_point = ll.item 0 (ll.item layerindex input_zero_points)
        let output_dtype = ll.item 0 (ll.item layerindex output_dtypes)
        let output_shape = ll.item 0 (ll.item layerindex output_shapes)
        let output_scale = ll.item 0 (ll.item layerindex output_scales)
        let output_zero_point = ll.item 0 (ll.item layerindex output_zero_points)

        let weight = ll.item 1 (ll.item layerindex input_data)
        let weight_shape = ll.item 1 (ll.item layerindex input_shapes)
        let weight_scales = ll.item 1 (ll.item layerindex input_scales)
        let weight_zero_points = ll.item 1 (ll.item layerindex input_zero_points)

        let bias = ll.item 2 (ll.item layerindex input_data)
        let bias_scales = ll.item 2 (ll.item layerindex input_scales)
        let bias_zero_points = ll.item 2 (ll.item layerindex input_zero_points)

        let framework = thislayer_params->framework
        let units = thislayer_params->out_features
        let use_bias = thislayer_params->bias
        
        // let nchw = optim_params->nchw
        let pack = (ll.item 0 (optim_params->pack), ll.item 1 (optim_params->pack), ll.item 2 (optim_params->pack))
        let unroll = (ll.item 0 (optim_params->unroll), ll.item 1 (optim_params->unroll), ll.item 2 (optim_params->unroll))
        let (packbatch, packinch, packoutch) = pack
        let (unrollbatch, unrollinch, unrolloutch) = unroll

        let input_shape_tuple = (ll.item 0 input_shape, ll.item 1 input_shape)
        let output_shape_tuple = (ll.item 0 output_shape, ll.item 1 output_shape)
        let weight_shape_tuple = (ll.item 0 weight_shape, ll.item 1 weight_shape)
        let (batch, inch) = input_shape_tuple
        let (_, outch) = output_shape_tuple

        let _ = if(packbatch > 1){
            except("pack batch should be 1 but got (" + toStr(packbatch) + ")")
        } else if(packbatch * unrollbatch > batch){
            except("batch size(" + toStr(batch) + ") should be bigger than packbatch * unrollbatch(" + toStr(packbatch * unrollbatch) + ")")
        } else{
            _end_
        }

        let _ = if(packinch * unrollinch > inch){
            except("input channel(" + toStr(inch) + ") should be bigger than packinch * unrollinch(" + toStr(packinch * unrollinch) + ")")
        } else{
            _end_
        }

        let _ = if(packoutch * unrolloutch > outch){
            except("output channel(" + toStr(outch) + ") should be bigger than packoutch * unrolloutch(" + toStr(packoutch * unrolloutch) + ")")
        } else{
            _end_
        }

        let templateparams = u.TemplateParameters(
            attr_params, optim_params, layer_params,
            input_data, input_dtypes, input_shapes, input_scales, input_zero_points,
            output_dtypes, output_shapes, output_scales, output_zero_points,
            input_edges, output_edges, ismainops,
            input_rt_list, output_rt_list
            )
        let internalparams = u.InternalParameters(units, use_bias,
            input_t, input_dtype, input_shape_tuple, input_scales, input_zero_points, 
            output_t, output_dtype, output_shape_tuple, output_scales, output_zero_points, 
            weight, weight_shape_tuple, weight_scales, weight_zero_points,
            bias, bias_scales, bias_zero_points, framework, unroll, pack)
        let params = u.initCodeGen templateparams internalparams
        let idxs = u.Indexes(0, 0, 0)
        let tree =  u.Op(u.setBatchInputOutputExpr,
                    u.Op(u.setWeightExpr, 
                    u.Op(u.setBiasExpr, 
                    u.Op(u.setMultShiftExpr,
                    u.Op(u.setZeropointsExpr,
                    u.Block(u.tiledBatchLoopExpr,
                        u.Op(u.setWeightIdxExpr,
                        u.Block(u.tiledOutputChannelLoopExpr,
                            u.Op(u.unrolledLoadSumExpr,
                            u.Op(u.unrolledInputSubviewExpr,
                            u.Block(u.tiledInputChannelLoopExpr,
                                u.Op(u.unrolledLoadInputWeightAndFMAExpr,
                                u.End(u.endExpr)),
                            u.Op(u.unrolledStoreExpr,
                            u.End(u.endExpr))))),
                        u.End(u.endExpr))),
                    u.End(u.zeroExpr)))))))

        u.genRuntimeCode params idxs tree
    }
}

_end_