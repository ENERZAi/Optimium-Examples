module common.uniontensor as ut
module core.List.List as ll

type Conv2d = {
    framework : string, 
    in_channels : i32, 
    out_channels : i32, 
    kernel_size : tuple<i32>, 
    stride : tuple<i32>, 
    padding : tuple<i32>, 
    dilation : i32, 
    groups : i32, 
    depth_multiplier : i32,
    padding_mode : string, 
    bias : bool,
}

type Castnadya = {
    framework : string,
    dtype : string
}

type Interpolate = {
    framework : string,
    scale_factor : f64,
    mode : string,
    antialias : bool,
    size : List<i32>,
    align_corners : bool,
    half_pixel_centers : bool
}

type Conv2dtranspose = {
    framework : string, 
    in_channels : i32, 
    out_channels : i32, 
    kernel_size : tuple<i32>, 
    stride : tuple<i32>, 
    padding : tuple<i32>, 
    output_padding : tuple<i32>,
    dilation : i32, 
    groups : i32, 
    padding_mode : string, 
    bias : bool,
}

type Pool2d = {
    framework : string, 
    pooltype : string,
    stride : tuple<i32>, 
    kernel_size : tuple<i32>, 
    padding : tuple<i32>, 
    dilation : i32, 
    return_indices : bool,
}

type Linear = {
    framework : string,
    in_features : i32,
    out_features : i32,
    bias: bool,

}

type Less = {
    framework : string,
}

type Add = {
    framework : string,
}

type Sub = {
    framework : string,
}

type Mul = {
    framework : string,
}

type Div = {
    framework : string,
}

type Floordiv = {
    framework : string,
}

type Sigmoid = {
    framework : string,
}

type Tanh = {
    framework : string,
}

type Exp = {
    framework : string,
}

type Sin = {
    framework : string,
}

type Cos = {
    framework : string,
}

type Softmax = {
    framework : string,
    axis: i32,
}

type Quantize = {
    framework : string,
}

type Dequantize = {
    framework : string,
}

type Abs = {
    framework : string,
}

type Ceil = {
    framework : string,
}

type Neg = {
    framework : string,
}

type Round = {
    framework : string,
}

type Rsqrt = {
    framework : string,
}

type Sqrt = {
    framework : string,
}

type Square = {
    framework : string,
}

type Relu = {
    framework : string,
}

type Relu6 = {
    framework : string,
}

type Leaky_relu = {
    framework : string,
    alpha : f32,
}

type Prelu = {
    framework : string,
    //num_parameters : what is this?
}

type Elu = {
    framework : string,
}

type Hardswish = {
    framework : string,
}

type Sum = {
    framework : string,
    dim : ll.List<i32>,
    keepdim : bool,
}

type Mean = {
    framework : string,
    dim : ll.List<i32>,
    keepdim : bool,
}

type Reduce_prod = {
    framework : string,
    dim : ll.List<i32>,
    keepdim : bool,
}

type Reduce_max = {
    framework : string,
    dim : ll.List<i32>,
    keepdim : bool,
}

type Reduce_min = {
    framework : string,
    dim : ll.List<i32>,
    keepdim : bool,
}

type Reduce_any = {
    framework : string,
    dim : ll.List<i32>,
    keepdim : bool,
}

type Transpose = {
    framework : string,
    permdim : ll.List<i32>,
}

type Pixelshuffle = {
    framework : string,
    block_size : f32,
}

type Space_to_depth = {
    framework : string,
    block_size : f32,
}

type Squeeze = {
    framework : string,
    dim : f32,
}

type Pad = {
    framework : string,
    padding: ll.List<ll.List<i32>>,
    padvalue : f32,  // change by input dtype inside
}

type Concat = {
    framework : string,
    dim : i32,
}

type Reshape = {
    framework : string,
    shape : ll.List<i32>,
}

type Batch_to_space = {
    framework : string,
    block_shape : ll.List<i32>,
    crop : ll.List<ll.List<i32>>,
}

type Space_to_batch = {
    framework : string,
    block_shape : ll.List<i32>,
    padding : ll.List<ll.List<i32>>,
}

type Gather = {
    framework : string,
    axis : i32,
    batch_dims : i32,
}

type Slice = {
    framework : string,
    slice_dim : ll.List<i32>,
    slice_start : ll.List<i32>,
    slice_end : ll.List<i32>,
    slice_step : ll.List<i32>,
    squeeze_indices : ll.List<i32>,
}